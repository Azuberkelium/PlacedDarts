document.addEventListener('DOMContentLoaded', () => {
    const dartboardContainer = document.getElementById('dartboard-container');
    const currentScoreDisplay = document.getElementById('current-score');
    const pdScoreDisplay = document.getElementById('pd-score');
    const undoButton = document.getElementById('undo-button');
    const resetButton = document.getElementById('reset-button');

    let currentScore = 0;
    let pdScore = 0;
    let scoreHistory = [];

    const dartNumbers = [20, 1, 18, 4, 13, 6, 10, 15, 2, 17, 3, 19, 7, 16, 8, 11, 14, 9, 12, 5];

    const createButton = (value, text, className, radius, angle, colorClass = '') => {
        const button = document.createElement('button');
        button.classList.add('dart-button', className);
        if (colorClass) {
            button.classList.add(colorClass);
        }
        button.dataset.value = value;
        button.textContent = text;
        
        // This is the core fix: `transform: translate()` is a reliable way to center elements
        // and `transform: rotate()` correctly positions them in a circle without overlap.
        button.style.transform = `translate(-50%, -50%) rotate(${angle}deg) translate(0, -${radius}px) rotate(-${angle}deg)`;
        
        return button;
    };

    const buildDartboard = () => {
        // Center buttons
        const bullseye50 = createButton(50, '50', 'bullseye', 0, 0);
        dartboardContainer.appendChild(bullseye50);

        const bullseye25 = createButton(25, '25', 'bullseye-25', 0, 0);
        dartboardContainer.appendChild(bullseye25);

        const degreesPerSector = 360 / dartNumbers.length;

        dartNumbers.forEach((number, index) => {
            // Angle starts at the top (0 degrees) for the 20 segment
            const angleInDegrees = index * degreesPerSector;
            const colorClass = index % 2 === 0 ? 'red-segment' : 'green-segment';

            // Adjusting radius values to prevent overlap
            const outerNumberRadius = 200;
            const doubleRadius = 160;
            const tripleRadius = 120;
            
            // Outer Number
            const outerNumberButton = createButton(number, number, 'outer-number', outerNumberRadius, angleInDegrees, colorClass);
            dartboardContainer.appendChild(outerNumberButton);

            // Double Ring
            const doubleButton = createButton(number * 2, `D${number}`, 'double-ring', doubleRadius, angleInDegrees, colorClass);
            dartboardContainer.appendChild(doubleButton);

            // Triple Ring
            const tripleButton = createButton(number * 3, `T${number}`, 'triple-ring', tripleRadius, angleInDegrees, colorClass);
            dartboardContainer.appendChild(tripleButton);
        });
    };

    const updateUI = () => {
        currentScoreDisplay.textContent = currentScore;
        pdScoreDisplay.textContent = pdScore;
    };

    dartboardContainer.addEventListener('click', (event) => {
        const target = event.target;
        if (target.classList.contains('dart-button')) {
            const value = parseInt(target.dataset.value, 10);
            
            currentScore += value;
            scoreHistory.push(value);

            if (currentScore >= 100) {
                pdScore++;
                currentScore = 0;
            }
            updateUI();
        }
    });

    undoButton.addEventListener('click', () => {
        if (scoreHistory.length > 0) {
            const lastScore = scoreHistory.pop();
            currentScore -= lastScore;
            
            if (currentScore < 0) {
                currentScore = 0;
            }
            updateUI();
        }
    });

    resetButton.addEventListener('click', () => {
        currentScore = 0;
        pdScore = 0;
        scoreHistory = [];
        updateUI();
    });

    buildDartboard();
    updateUI();
});
